services:
# eureka
  eureka-service:
    build:
      context: ./server/
      dockerfile: Dockerfile
    container_name: eureka-service
    ports:
      - "8761:8761"
    networks:
      - msa-network

# vendor
  vendor-db:
    image: mysql:latest
    container_name: vendor-db
    environment:
      MYSQL_ROOT_PASSWORD: 0000
      MYSQL_DATABASE: sparta-vendor
      MYSQL_USER: vendor
      MYSQL_PASSWORD: 9999
    ports:
      - "13306:3306"
    networks:
      - vendor-network

  vendor-service:
    build:
      context: ./vendor/
      dockerfile: Dockerfile
    container_name: vendor-service
    ports:
      - "19100:8080"
    depends_on:
      - eureka-service
      - vendor-db
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://vendor-db:3306/sparta-vendor
      SPRING_DATASOURCE_USERNAME: vendor
      SPRING_DATASOURCE_PASSWORD: 9999
    restart: always
    networks:
      - msa-network
      - vendor-network

# product
  product-db:
    image: mysql:latest
    container_name: product-db
    environment:
      MYSQL_ROOT_PASSWORD: 0000
      MYSQL_DATABASE: sparta-product
      MYSQL_USER: product
      MYSQL_PASSWORD: 9999
    ports:
      - "23306:3306"
    networks:
      - product-network

  product-service:
    build:
      context: ./product/
      dockerfile: Dockerfile
    container_name: product-service
    ports:
      - "19200:8080"
    depends_on:
      - eureka-service
      - product-db
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://product-db:3306/sparta-product
      SPRING_DATASOURCE_USERNAME: product
      SPRING_DATASOURCE_PASSWORD: 9999
    restart: always
    networks:
      - msa-network
      - product-network

# order
  order-db:
    image: mysql:latest
    container_name: order-db
    environment:
      MYSQL_ROOT_PASSWORD: 0000
      MYSQL_DATABASE: sparta-order
      MYSQL_USER: order
      MYSQL_PASSWORD: 9999
    ports:
      - "33306:3306"
    networks:
      - order-network

  order-service:
    build:
      context: ./order/
      dockerfile: Dockerfile
    container_name: order-service
    ports:
      - "19300:8080"
    depends_on:
      - eureka-service
      - order-db
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://order-db:3306/sparta-order
      SPRING_DATASOURCE_USERNAME: order
      SPRING_DATASOURCE_PASSWORD: 9999
    restart: always
    networks:
      - msa-network
      - order-network

# redis
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - "msa-network"

# kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
    networks:
      - "msa-network"

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - "msa-network"

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - 8080:8080
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - "msa-network"

  zipkin:
    image: openzipkin/zipkin:latest
    container_name: zipkin
    ports:
      - "9411:9411"
    networks:
      - "msa-network"

# network
networks:
  msa-network:
    driver: bridge
  vendor-network:
    driver: bridge
  product-network:
    driver: bridge
  order-network:
    driver: bridge